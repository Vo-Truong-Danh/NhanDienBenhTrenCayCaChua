import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image

st.set_page_config(page_title="D·ª± ƒëo√°n b·ªánh l√° c√† chua", layout="wide")
st.title("üß™ D·ª± ƒëo√°n b·ªánh l√° C√† Chua qua ·∫£nh")
st.write(
    "T·∫£i l√™n ·∫£nh l√° c√† chua, h·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông ph√¢n t√≠ch b·ªánh v√† ƒë∆∞a ra g·ª£i √Ω. "
    "L∆∞u √Ω: Model chuy√™n d√πng cho l√° c√† chua v√† c√≥ th·ªÉ cho k·∫øt qu·∫£ kh√¥ng ch√≠nh x√°c v·ªõi c√°c lo·∫°i ·∫£nh kh√°c."
)


# TH√îNG TIN B·ªÜNH V√Ä C√ÅCH X·ª¨ L√ù 

disease_info = {
    'Bacterial_spot': {
        'scientific_name_en': "Xanthomonas spp. (e.g., X. campestris pv. vesicatoria)",
        'vietnamese_name': "B·ªánh ƒë·ªëm khu·∫©n (do Xanthomonas spp.)",
        'remedies': [
            "S·ª≠ d·ª•ng thu·ªëc tr·ª´ b·ªánh g·ªëc ƒê·ªìng (v√≠ d·ª•: Copper Oxychloride, Copper Hydroxide) theo n·ªìng ƒë·ªô khuy·∫øn c√°o.",
            "Trong tr∆∞·ªùng h·ª£p √°p l·ª±c b·ªánh cao, c√≥ th·ªÉ xem x√©t s·ª≠ d·ª•ng kh√°ng sinh chuy√™n d√πng (v√≠ d·ª•: Streptomycin, Kasugamycin) nh∆∞ng ph·∫£i tu√¢n th·ªß nghi√™m ng·∫∑t li·ªÅu l∆∞·ª£ng, th·ªùi gian c√°ch ly v√† ch·ªâ s·ª≠ d·ª•ng khi th·ª±c s·ª± c·∫ßn thi·∫øt ƒë·ªÉ tr√°nh kh√°ng thu·ªëc."
        ],
        'actions': [
            "V·ªá sinh ƒë·ªìng ru·ªông: Thu gom v√† ti√™u h·ªßy ngay c√°c b·ªô ph·∫≠n c√¢y b·ªã b·ªánh (l√°, c√†nh, qu·∫£).",
            "Lu√¢n canh c√¢y tr·ªìng: Kh√¥ng tr·ªìng c√† chua ho·∫∑c c√°c c√¢y c√πng h·ªç (·ªõt, khoai t√¢y) tr√™n c√πng m·ªôt ch√¢n ƒë·∫•t trong √≠t nh·∫•t 2-3 nƒÉm.",
            "Gi·ªëng kh√°ng b·ªánh: ∆Øu ti√™n ch·ªçn gi·ªëng c√† chua c√≥ kh·∫£ nƒÉng kh√°ng b·ªánh ƒë·ªëm khu·∫©n.",
            "Qu·∫£n l√Ω t∆∞·ªõi ti√™u: Tr√°nh t∆∞·ªõi n∆∞·ªõc tr·ª±c ti·∫øp l√™n l√°, ƒë·∫∑c bi·ªát v√†o bu·ªïi chi·ªÅu t·ªëi. Gi·ªØ cho b·ªÅ m·∫∑t l√° kh√¥ r√°o.",
            "Kh·ª≠ tr√πng d·ª•ng c·ª•: Th∆∞·ªùng xuy√™n v·ªá sinh v√† kh·ª≠ tr√πng c√°c d·ª•ng c·ª• l√†m v∆∞·ªùn (dao, k√©o, cu·ªëc).",
            "M·∫≠t ƒë·ªô tr·ªìng h·ª£p l√Ω: Tr·ªìng v·ªõi m·∫≠t ƒë·ªô v·ª´a ph·∫£i ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªô th√¥ng tho√°ng cho v∆∞·ªùn c√¢y."
        ]
    },
    'Early_blight': {
        'scientific_name_en': "Alternaria solani",
        'vietnamese_name': "B·ªánh ch√°y s·ªõm (do Alternaria solani)",
        'remedies': [
            "S·ª≠ d·ª•ng thu·ªëc tr·ª´ n·∫•m c√≥ ho·∫°t ch·∫•t Mancozeb, Chlorothalonil khi b·ªánh m·ªõi xu·∫•t hi·ªán.",
            "C√°c ho·∫°t ch·∫•t Azoxystrobin, Difenoconazole c≈©ng cho hi·ªáu qu·∫£ t·ªët. N√™n lu√¢n phi√™n thu·ªëc ƒë·ªÉ tr√°nh kh√°ng thu·ªëc.",
            "Phun thu·ªëc k·ªπ c·∫£ hai m·∫∑t l√° v√† phun nh·∫Øc l·∫°i theo h∆∞·ªõng d·∫´n c·ªßa nh√† s·∫£n xu·∫•t."
        ],
        'actions': [
            "V·ªá sinh ƒë·ªìng ru·ªông: D·ªçn s·∫°ch t√†n d∆∞ c√¢y tr·ªìng v·ª• tr∆∞·ªõc, ƒë·∫∑c bi·ªát l√† nh·ªØng c√¢y b·ªã b·ªánh.",
            "Tho√°t n∆∞·ªõc t·ªët: ƒê·∫£m b·∫£o ru·ªông c√† chua kh√¥ng b·ªã √∫ng n∆∞·ªõc, nh·∫•t l√† trong m√πa m∆∞a.",
            "Lu√¢n canh c√¢y tr·ªìng: Th·ª±c hi·ªán lu√¢n canh v·ªõi c√°c c√¢y tr·ªìng kh√°c h·ªç.",
            "B√≥n ph√¢n c√¢n ƒë·ªëi: Tr√°nh b√≥n th·ª´a ƒë·∫°m (N), tƒÉng c∆∞·ªùng b√≥n kali (K) v√† canxi (Ca) ƒë·ªÉ c√¢y c·ª©ng c√°p.",
            "C·∫Øt t·ªâa l√° b·ªánh: T·ªâa b·ªè c√°c l√° gi√†, l√° b·ªã b·ªánh ·ªü g·ªëc ƒë·ªÉ gi·∫£m ngu·ªìn b·ªánh v√† t·∫°o ƒë·ªô th√¥ng tho√°ng."
        ]
    },
    'Late_blight': {
        'scientific_name_en': "Phytophthora infestans",
        'vietnamese_name': "B·ªánh s∆∞∆°ng mai (do Phytophthora infestans)",
        'remedies': [
            "Phun thu·ªëc ph√≤ng tr·ª´ khi th·ªùi ti·∫øt thu·∫≠n l·ª£i cho b·ªánh ph√°t tri·ªÉn (·∫©m ƒë·ªô cao, m∆∞a nhi·ªÅu, c√≥ s∆∞∆°ng m√π), ƒë·∫∑c bi·ªát ·ªü giai ƒëo·∫°n c√¢y ra hoa, ƒë·∫≠u qu·∫£.",
            "S·ª≠ d·ª•ng c√°c lo·∫°i thu·ªëc c√≥ ho·∫°t ch·∫•t nh∆∞: Mancozeb + Metalaxyl, Cymoxanil + Mancozeb, Propamocarb, Dimethomorph.",
            "Lu√¢n phi√™n c√°c nh√≥m thu·ªëc kh√°c nhau ƒë·ªÉ h·∫°n ch·∫ø s·ª± h√¨nh th√†nh t√≠nh kh√°ng c·ªßa n·∫•m b·ªánh."
        ],
        'actions': [
            "Ch·ªçn gi·ªëng kh√°ng: S·ª≠ d·ª•ng gi·ªëng c√† chua c√≥ kh·∫£ nƒÉng kh√°ng b·ªánh s∆∞∆°ng mai.",
            "M·∫≠t ƒë·ªô tr·ªìng: Tr·ªìng th∆∞a, h·ª£p l√Ω ƒë·ªÉ v∆∞·ªùn lu√¥n th√¥ng tho√°ng.",
            "Qu·∫£n l√Ω n∆∞·ªõc: Tho√°t n∆∞·ªõc t·ªët cho ru·ªông, tr√°nh ƒë·ªÉ n∆∞·ªõc ƒë·ªçng l·∫°i sau m∆∞a ho·∫∑c t∆∞·ªõi.",
            "V·ªá sinh v∆∞·ªùn: Ti√™u h·ªßy k·ªãp th·ªùi nh·ªØng c√¢y, l√° b·ªã b·ªánh n·∫∑ng.",
            "Lu√¢n canh: Kh√¥ng tr·ªìng c√† chua li√™n t·ª•c nhi·ªÅu nƒÉm tr√™n m·ªôt th·ª≠a ru·ªông."
        ]
    },
    'Leaf_Mold': {
        'scientific_name_en': "Fulvia fulva (syn. Cladosporium fulvum)",
        'vietnamese_name': "B·ªánh m·ªëc l√° (do Fulvia fulva)",
        'remedies': [
            "S·ª≠ d·ª•ng thu·ªëc tr·ª´ n·∫•m g·ªëc ƒê·ªìng, ho·∫∑c c√°c ho·∫°t ch·∫•t nh∆∞ Chlorothalonil, Azoxystrobin, Trifloxystrobin.",
            "Phun thu·ªëc k·ªπ v√†o m·∫∑t d∆∞·ªõi c·ªßa l√°, n∆°i n·∫•m b·ªánh th∆∞·ªùng ph√°t tri·ªÉn m·∫°nh."
        ],
        'actions': [
            "Th√¥ng gi√≥: ƒê·∫£m b·∫£o ƒë·ªô th√¥ng tho√°ng t·ªët, ƒë·∫∑c bi·ªát quan tr·ªçng trong ƒëi·ªÅu ki·ªán nh√† k√≠nh ho·∫∑c nh√† l∆∞·ªõi.",
            "Ki·ªÉm so√°t ƒë·ªô ·∫©m: Gi·∫£m ƒë·ªô ·∫©m kh√¥ng kh√≠ b·∫±ng c√°ch t∆∞·ªõi n∆∞·ªõc h·ª£p l√Ω, tr√°nh t∆∞·ªõi v√†o bu·ªïi chi·ªÅu t·ªëi.",
            "C·∫Øt t·ªâa: Lo·∫°i b·ªè l√° gi√†, l√° g·ªëc v√† nh·ªØng l√° b·ªã b·ªánh ƒë·ªÉ gi·∫£m ngu·ªìn l√¢y nhi·ªÖm.",
            "V·ªá sinh: D·ªçn d·∫πp t√†n d∆∞ th·ª±c v·∫≠t b·ªã b·ªánh."
        ]
    },
    'Septoria_leaf_spot': {
        'scientific_name_en': "Septoria lycopersici",
        'vietnamese_name': "B·ªánh ƒë·ªëm l√° Septoria (do Septoria lycopersici)",
        'remedies': [
            "Phun thu·ªëc tr·ª´ n·∫•m ch·ª©a ho·∫°t ch·∫•t Chlorothalonil, Mancozeb khi tri·ªáu ch·ª©ng b·ªánh xu·∫•t hi·ªán.",
            "Thu·ªëc g·ªëc ƒê·ªìng c≈©ng c√≥ t√°c d·ª•ng ph√≤ng tr·ª´ nh·∫•t ƒë·ªãnh."
        ],
        'actions': [
            "Ti√™u h·ªßy l√° b·ªánh: Thu gom v√† ti√™u h·ªßy c√°c l√° b·ªã nhi·ªÖm b·ªánh ƒë·ªÉ gi·∫£m thi·ªÉu s·ª± l√¢y lan.",
            "V·ªá sinh ƒë·ªìng ru·ªông: Gi·ªØ cho v∆∞·ªùn c√† chua s·∫°ch s·∫Ω, kh√¥ng c√≥ t√†n d∆∞ c√¢y b·ªánh.",
            "Lu√¢n canh: √Åp d·ª•ng ch·∫ø ƒë·ªô lu√¢n canh c√¢y tr·ªìng √≠t nh·∫•t 1-2 nƒÉm v·ªõi c√¢y kh√¥ng ph·∫£i l√† k√Ω ch·ªß c·ªßa n·∫•m Septoria.",
            "Ph∆∞∆°ng ph√°p t∆∞·ªõi: ∆Øu ti√™n t∆∞·ªõi g·ªëc, tr√°nh t∆∞·ªõi phun l√™n l√° l√†m ·∫©m l√° k√©o d√†i.",
            "Dinh d∆∞·ª°ng: B√≥n ph√¢n c√¢n ƒë·ªëi, tƒÉng c∆∞·ªùng ph√¢n h·ªØu c∆° v√† kali ƒë·ªÉ c√¢y kh·ªèe m·∫°nh, tƒÉng s·ª©c ƒë·ªÅ kh√°ng."
        ]
    },
    'Spider_mites Two-spotted_spider_mite': {
        'scientific_name_en': "Tetranychus urticae",
        'vietnamese_name': "Nh·ªán ƒë·ªè hai ch·∫•m (Tetranychus urticae)",
        'remedies': [
            "S·ª≠ d·ª•ng thu·ªëc ƒë·∫∑c tr·ªã nh·ªán nh∆∞ Abamectin, Emamectin Benzoate, Spiromesifen, Hexythiazox.",
            "C√≥ th·ªÉ d√πng c√°c s·∫£n ph·∫©m sinh h·ªçc nh∆∞ d·∫ßu kho√°ng, n·∫•m k√Ω sinh (Beauveria bassiana, Metarhizium anisopliae).",
            "Phun k·ªπ m·∫∑t d∆∞·ªõi l√°, n∆°i nh·ªán th∆∞·ªùng t·∫≠p trung. Phun l·∫∑p l·∫°i sau 5-7 ng√†y n·∫øu m·∫≠t ƒë·ªô nh·ªán cao."
        ],
        'actions': [
            "Bi·ªán ph√°p c∆° h·ªçc: Phun n∆∞·ªõc m·∫°nh v√†o m·∫∑t d∆∞·ªõi l√° (khi m·∫≠t ƒë·ªô nh·ªán c√≤n th·∫•p) ƒë·ªÉ r·ª≠a tr√¥i nh·ªán.",
            "B·∫£o t·ªìn thi√™n ƒë·ªãch: T·∫°o ƒëi·ªÅu ki·ªán cho c√°c lo√†i thi√™n ƒë·ªãch c·ªßa nh·ªán ph√°t tri·ªÉn (v√≠ d·ª•: b·ªç r√πa, b·ªç c√°nh g√¢n, nh·ªán b·∫Øt m·ªìi).",
            "V·ªá sinh v∆∞·ªùn: C·∫Øt t·ªâa v√† ti√™u h·ªßy c√°c l√°, c√†nh b·ªã nh·ªán h·∫°i n·∫∑ng.",
            "Tr√°nh kh√¥ h·∫°n: Duy tr√¨ ƒë·ªô ·∫©m th√≠ch h·ª£p cho v∆∞·ªùn, v√¨ nh·ªán ƒë·ªè th∆∞·ªùng ph√°t tri·ªÉn m·∫°nh trong ƒëi·ªÅu ki·ªán kh√¥ n√≥ng."
        ]
    },
    'Target_Spot': {
        'scientific_name_en': "Corynespora cassiicola",
        'vietnamese_name': "B·ªánh ƒë·ªëm m·∫Øt cua (do Corynespora cassiicola)",
        'remedies': [
            "S·ª≠ d·ª•ng thu·ªëc tr·ª´ n·∫•m c√≥ ho·∫°t ch·∫•t Chlorothalonil, Mancozeb.",
            "C√°c thu·ªëc nh√≥m Strobilurin (v√≠ d·ª•: Azoxystrobin, Pyraclostrobin) c≈©ng cho th·∫•y hi·ªáu qu·∫£ t·ªët."
        ],
        'actions': [
            "V·ªá sinh: Thu d·ªçn v√† ti√™u h·ªßy t√†n d∆∞ c√¢y b·ªánh t·ª´ v·ª• tr∆∞·ªõc.",
            "Th√¥ng tho√°ng: ƒê·∫£m b·∫£o v∆∞·ªùn tr·ªìng th√¥ng tho√°ng, tr√°nh ·∫©m ƒë·ªô cao k√©o d√†i.",
            "Lu√¢n canh: Th·ª±c hi·ªán lu√¢n canh v·ªõi c√°c c√¢y tr·ªìng kh√¥ng ph·∫£i l√† k√Ω ch·ªß c·ªßa n·∫•m.",
            "Dinh d∆∞·ª°ng: B√≥n ph√¢n c√¢n ƒë·ªëi, kh√¥ng b√≥n th·ª´a ƒë·∫°m."
        ]
    },
    'Tomato_Yellow_Leaf_Curl_Virus': {
        'scientific_name_en': "Tomato yellow leaf curl virus (TYLCV)",
        'vietnamese_name': "Virus xoƒÉn v√†ng l√° c√† chua (TYLCV)",
        'remedies': [
            "**Kh√¥ng c√≥ thu·ªëc ƒë·∫∑c tr·ªã b·ªánh virus.** Bi·ªán ph√°p ch·ªß y·∫øu l√† ph√≤ng tr·ª´ c√¥n tr√πng m√¥i gi·ªõi.",
            "Ki·ªÉm so√°t b·ªç ph·∫•n tr·∫Øng (m√¥i gi·ªõi truy·ªÅn b·ªánh): S·ª≠ d·ª•ng c√°c ho·∫°t ch·∫•t nh∆∞ Imidacloprid, Thiamethoxam, Dinotefuran, Pymetrozin. Lu√¢n phi√™n thu·ªëc ƒë·ªÉ tr√°nh kh√°ng.",
            "S·ª≠ d·ª•ng c√°c bi·ªán ph√°p sinh h·ªçc: D·∫ßu kho√°ng, x√† ph√≤ng c√¥n tr√πng ƒë·ªÉ gi·∫£m m·∫≠t ƒë·ªô b·ªç ph·∫•n."
        ],
        'actions': [
            "Nh·ªï b·ªè v√† ti√™u h·ªßy: Ph√°t hi·ªán s·ªõm v√† ti√™u h·ªßy ngay nh·ªØng c√¢y c√≥ tri·ªáu ch·ª©ng b·ªánh ƒë·ªÉ ngƒÉn ch·∫∑n l√¢y lan.",
            "Gi·ªëng kh√°ng Virus: ∆Øu ti√™n s·ª≠ d·ª•ng c√°c gi·ªëng c√† chua c√≥ kh·∫£ nƒÉng kh√°ng ho·∫∑c ch·ªëng ch·ªãu virus TYLCV.",
            "V·ªá sinh v∆∞·ªùn: Di·ªát tr·ª´ c·ªè d·∫°i xung quanh v∆∞·ªùn, v√¨ c·ªè d·∫°i c√≥ th·ªÉ l√† n∆°i tr√∫ ng·ª• c·ªßa b·ªç ph·∫•n tr·∫Øng.",
            "Lu√¢n canh: Th·ª±c hi·ªán lu√¢n canh v·ªõi c√¢y tr·ªìng kh√¥ng ph·∫£i l√† k√Ω ch·ªß c·ªßa virus v√† b·ªç ph·∫•n.",
            "Nh√† l∆∞·ªõi/m√†ng ch·∫Øn: S·ª≠ d·ª•ng nh√† l∆∞·ªõi c√≥ m·∫Øt l∆∞·ªõi nh·ªè ƒë·ªÉ ngƒÉn ch·∫∑n b·ªç ph·∫•n x√¢m nh·∫≠p, ƒë·∫∑c bi·ªát trong giai ƒëo·∫°n c√¢y con."
        ]
    },
    'Tomato_mosaic_virus': {
        'scientific_name_en': "Tomato mosaic virus (ToMV)",
        'vietnamese_name': "Virus kh·∫£m l√° c√† chua (ToMV)",
        'remedies': [
            "**Kh√¥ng c√≥ thu·ªëc ƒë·∫∑c tr·ªã b·ªánh virus.** T·∫≠p trung v√†o c√°c bi·ªán ph√°p ph√≤ng ng·ª´a l√¢y nhi·ªÖm.",
            "Ki·ªÉm so√°t c√¥n tr√πng m√¥i gi·ªõi (n·∫øu c√≥): M·ªôt s·ªë virus kh·∫£m c√≥ th·ªÉ l√¢y qua c√¥n tr√πng, c·∫ßn x√°c ƒë·ªãnh v√† ki·ªÉm so√°t (v√≠ d·ª•: r·∫ßy, r·ªáp)."
        ],
        'actions': [
            "Nh·ªï b·ªè v√† ti√™u h·ªßy: Lo·∫°i b·ªè v√† ti√™u h·ªßy ngay c√¢y b·ªã b·ªánh.",
            "S·ª≠ d·ª•ng gi·ªëng kh√°ng: Ch·ªçn gi·ªëng c√≥ kh·∫£ nƒÉng kh√°ng virus ToMV.",
            "V·ªá sinh d·ª•ng c·ª•: Kh·ª≠ tr√πng d·ª•ng c·ª• (dao, k√©o) th∆∞·ªùng xuy√™n b·∫±ng c·ªìn y t·∫ø (>70%) ho·∫∑c dung d·ªãch Javel khi l√†m vi·ªác gi·ªØa c√°c c√¢y, c√°c lu·ªëng.",
            "H·∫°n ch·∫ø ti·∫øp x√∫c c∆° h·ªçc: Virus d·ªÖ l√¢y qua v·∫øt th∆∞∆°ng c∆° gi·ªõi, h·∫°n ch·∫ø c√°c ho·∫°t ƒë·ªông g√¢y x√¢y x√°t cho c√¢y.",
            "Kh√¥ng h√∫t thu·ªëc l√°: Ng∆∞·ªùi l√†m v∆∞·ªùn kh√¥ng n√™n h√∫t thu·ªëc l√° khi ƒëang l√†m vi·ªác v·ªõi c√¢y c√† chua, v√¨ virus ToMV c√≥ th·ªÉ t·ªìn t·∫°i trong thu·ªëc l√° v√† l√¢y nhi·ªÖm sang c√¢y."
        ]
    },
    'healthy': {
        'scientific_name_en': "N/A (Healthy Plant)",
        'vietnamese_name': "C√¢y kh·ªèe m·∫°nh",
        'remedies': ["Kh√¥ng c·∫ßn x·ª≠ l√Ω thu·ªëc b·ªánh. Ti·∫øp t·ª•c duy tr√¨ c√°c bi·ªán ph√°p chƒÉm s√≥c t·ªët."],
        'actions': [
            "ChƒÉm s√≥c ƒë·ªãnh k·ª≥: T∆∞·ªõi n∆∞·ªõc ƒë·ªß ·∫©m theo nhu c·∫ßu c·ªßa c√¢y, tr√°nh ƒë·ªÉ c√¢y b·ªã √∫ng ho·∫∑c h·∫°n h√°n.",
            "B√≥n ph√¢n c√¢n ƒë·ªëi: Cung c·∫•p ƒë·∫ßy ƒë·ªß v√† c√¢n ƒë·ªëi c√°c ch·∫•t dinh d∆∞·ª°ng ƒëa, trung, vi l∆∞·ª£ng.",
            "ThƒÉm v∆∞·ªùn th∆∞·ªùng xuy√™n: Quan s√°t c√¢y h√†ng ng√†y ƒë·ªÉ ph√°t hi·ªán s·ªõm b·∫•t k·ª≥ d·∫•u hi·ªáu b·∫•t th∆∞·ªùng n√†o c·ªßa s√¢u b·ªánh.",
            "Ph√≤ng ng·ª´a t·ªïng h·ª£p: Ti·∫øp t·ª•c √°p d·ª•ng c√°c bi·ªán ph√°p ph√≤ng ng·ª´a chung nh∆∞ v·ªá sinh ƒë·ªìng ru·ªông, lu√¢n canh c√¢y tr·ªìng (n·∫øu c√≥ k·∫ø ho·∫°ch cho v·ª• sau), ch·ªçn gi·ªëng t·ªët."
        ]
    }
}

# THAM S·ªê C·∫§U H√åNH CHO MODEL
MODEL_PATH = "tomato_cnn_model.h5"
CONFIDENCE_THRESHOLD = 0.6
GREEN_RATIO_THRESHOLD = 0.30 #ƒêi·ªÅu ch·ªânh t·ª∑ l·ªá nh·∫≠n di·ªán ·∫£nh ko ph·∫£i c√† chua

# LOAD MODEL & LABELS G·ªêC
@st.cache_resource(show_spinner="ƒêang t·∫£i model nh·∫≠n d·∫°ng...")
def load_model_from_path(model_path):
    try:
        model = tf.keras.models.load_model(model_path)
        return model
    except Exception as e:
        st.error(f"L·ªói khi t·∫£i model: {e}")
        st.error(f"H√£y ƒë·∫£m b·∫£o file model '{model_path}' t·ªìn t·∫°i trong c√πng th∆∞ m·ª•c v·ªõi app.py ho·∫∑c cung c·∫•p ƒë∆∞·ªùng d·∫´n ch√≠nh x√°c.")
        return None

@st.cache_data
def load_original_class_names():
    return [
        'Tomato___Bacterial_spot', 'Tomato___Early_blight', 'Tomato___Late_blight',
        'Tomato___Leaf_Mold', 'Tomato___Septoria_leaf_spot',
        'Tomato___Spider_mites Two-spotted_spider_mite', 'Tomato___Target_Spot',
        'Tomato___Tomato_Yellow_Leaf_Curl_Virus', 'Tomato___Tomato_mosaic_virus',
        'Tomato___healthy'
    ]

model = load_model_from_path(MODEL_PATH)
original_class_names = load_original_class_names()
class_name_keys = [name.replace("Tomato___", "") for name in original_class_names]

# H√ÄM X·ª¨ L√ù
def preprocess_image(image: Image.Image, target_size=(128, 128)):
    if image.mode != "RGB":
        image = image.convert("RGB")
    image_resized = image.resize(target_size)
    img_array = tf.keras.preprocessing.image.img_to_array(image_resized)
    img_array = img_array / 255.0
    img_array = tf.expand_dims(img_array, 0)
    return img_array

def check_green_ratio(image: Image.Image):
    img_array = np.array(image.convert('RGB'))
    green_pixels = np.sum((img_array[:,:,1] > img_array[:,:,0]) & \
                          (img_array[:,:,1] > img_array[:,:,2]) & \
                          (img_array[:,:,1] > 30))
    total_pixels = img_array.shape[0] * img_array.shape[1]
    ratio = green_pixels / total_pixels if total_pixels > 0 else 0
    return ratio

def predict_and_analyze(image_input: Image.Image):
    if model is None:
        return 'MODEL_ERROR', None, 0.0

    green_pixel_ratio = check_green_ratio(image_input)
    if green_pixel_ratio < GREEN_RATIO_THRESHOLD:
        return 'LOW_GREEN', f"{green_pixel_ratio*100:.1f}%", 0.0

    try:
        processed_image = preprocess_image(image_input)
        prediction_probabilities = model.predict(processed_image, verbose=0)[0]
        predicted_index = np.argmax(prediction_probabilities)
        confidence = float(prediction_probabilities[predicted_index])
        predicted_class_key = class_name_keys[predicted_index]
        return 'OK', predicted_class_key, confidence
    except Exception as e:
        return 'PREDICTION_ERROR', "L·ªói x·ª≠ l√Ω model .", 0.0

# GIAO DI·ªÜN 
if model is None:
    st.error("Kh√¥ng th·ªÉ t·∫£i Model. ·ª®ng d·ª•ng kh√¥ng th·ªÉ ho·∫°t ƒë·ªông. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n ho·∫∑c file model.")
else:
    if 'last_analysis' not in st.session_state:
        st.session_state.last_analysis = {"status": None, "class_key": None, "confidence": None, "error_detail": None, "file_id": None}

    col1, col2 = st.columns([1, 2])

    with col1:
        st.header("üñºÔ∏è ·∫¢nh L√° C√† Chua")
        uploaded_file = st.file_uploader(
            "T·∫£i ·∫£nh l√™n t·∫°i ƒë√¢y (t·ª± ƒë·ªông ph√¢n t√≠ch):",
            type=["jpg", "jpeg", "png"],
            key="file_uploader_key" 
        )

        if uploaded_file is not None:
            current_file_id = uploaded_file.file_id 
            if st.session_state.last_analysis["file_id"] != current_file_id:
                try:
                    image = Image.open(uploaded_file)
                    st.image(image, caption="·∫¢nh ƒë√£ t·∫£i l√™n", use_container_width=True)
                    with st.spinner("ƒêang ph√¢n t√≠ch ·∫£nh..."):
                        status, result_data, confidence_or_ratio = predict_and_analyze(image)

                    # Update session state with new analysis results
                    if status == 'LOW_GREEN':
                        st.session_state.last_analysis = {"status": status, "class_key": None, "confidence": None, "error_detail": result_data, "file_id": current_file_id}
                    elif status == 'OK':
                        st.session_state.last_analysis = {"status": status, "class_key": result_data, "confidence": confidence_or_ratio, "error_detail": None, "file_id": current_file_id}
                    else: # MODEL_ERROR or PREDICTION_ERROR
                        st.session_state.last_analysis = {"status": status, "class_key": None, "confidence": None, "error_detail": result_data if result_data else "L·ªói h·ªá th·ªëng kh√¥ng x√°c ƒë·ªãnh.", "file_id": current_file_id}
                        if status == 'MODEL_ERROR': # Specific message for model error during predict
                             st.error("L·ªói: Model nh·∫≠n d·∫°ng kh√¥ng th·ªÉ th·ª±c hi·ªán d·ª± ƒëo√°n l√∫c n√†y.")

                except Exception as e:
                    st.error(f"L·ªói khi m·ªü ho·∫∑c x·ª≠ l√Ω ·∫£nh: {e}")
                    st.session_state.last_analysis = {"status": "IMAGE_ERROR", "class_key": None, "confidence": None, "error_detail": str(e), "file_id": current_file_id}
            else:
                try:
                    image = Image.open(uploaded_file) 
                    st.image(image, caption="·∫¢nh ƒë√£ t·∫£i l√™n (k·∫øt qu·∫£ c≈©)", use_container_width=True)
                except Exception as e:
                    st.error(f"L·ªói khi hi·ªÉn th·ªã l·∫°i ·∫£nh: {e}")
                    st.session_state.last_analysis = {"status": "IMAGE_ERROR", "class_key": None, "confidence": None, "error_detail": str(e), "file_id": current_file_id}


        elif st.session_state.last_analysis["file_id"] is not None: # File was removed
            st.session_state.last_analysis = {"status": None, "class_key": None, "confidence": None, "error_detail": None, "file_id": None}


    with col2:
        st.header("üìä K·∫øt qu·∫£ Ph√¢n T√≠ch")
        analysis_result = st.session_state.last_analysis

        if analysis_result["status"] == 'OK':
            predicted_class_key = analysis_result["class_key"]
            confidence = analysis_result["confidence"]
            display_confidence = confidence * 100

            if confidence < CONFIDENCE_THRESHOLD:
                st.warning(
                    f"**ƒê·ªô tin c·∫≠y th·∫•p ({display_confidence:.2f}%). Model kh√¥ng ch·∫Øc ch·∫Øn v·ªÅ k·∫øt qu·∫£ n√†y.**"
                )
                st.info(
                    "Nguy√™n nh√¢n c√≥ th·ªÉ l√†:\n"
                    "- ·∫¢nh ch·ª•p ch∆∞a r√µ n√©t, thi·∫øu s√°ng, ho·∫∑c g√≥c ch·ª•p ch∆∞a t·ªëi ∆∞u.\n"
                    "- Tri·ªáu ch·ª©ng b·ªánh kh√¥ng ƒëi·ªÉn h√¨nh ho·∫∑c b·ªánh kh√¥ng n·∫±m trong danh m·ª•c model ƒë∆∞·ª£c hu·∫•n luy·ªán.\n\n"
                    "**G·ª£i √Ω:** Vui l√≤ng th·ª≠ l·∫°i v·ªõi ·∫£nh kh√°c, ch·ª•p r√µ h∆°n, ho·∫∑c tham kh·∫£o √Ω ki·∫øn chuy√™n gia."
                )
            else:
                info = disease_info.get(predicted_class_key)
                if info:
                    st.success(f"**B·ªánh d·ª± ƒëo√°n: {info['vietnamese_name']}**")
                    st.markdown(f"*(T√™n khoa h·ªçc: {info['scientific_name_en']})*")
                    st.info(f"ƒê·ªô tin c·∫≠y: {display_confidence:.2f}%")

                    if predicted_class_key != 'healthy':
                        st.subheader("‚ö†Ô∏è G·ª£i √Ω x·ª≠ l√Ω v√† kh·∫Øc ph·ª•c:")
                        with st.expander("**Bi·ªán ph√°p h√≥a h·ªçc (Tham kh·∫£o)**", expanded=True):
                            if info['remedies']:
                                for remedy in info['remedies']:
                                    st.write(f"‚Ä¢ {remedy}")
                            else:
                                st.write("‚Ä¢ Kh√¥ng c√≥ g·ª£i √Ω thu·ªëc c·ª• th·ªÉ cho tr∆∞·ªùng h·ª£p n√†y.")

                        with st.expander("**Bi·ªán ph√°p canh t√°c v√† ph√≤ng ng·ª´a**", expanded=True):
                            if info['actions']:
                                 for action in info['actions']:
                                    st.write(f"‚Ä¢ {action}")
                            else:
                                st.write("‚Ä¢ Kh√¥ng c√≥ g·ª£i √Ω bi·ªán ph√°p c·ª• th·ªÉ.")
                        st.warning(
                            """
                            **L∆∞u √Ω quan tr·ªçng (Thu·ªëc BVTV & Bi·ªán ph√°p canh t√°c):**
                            \nC√°c th√¥ng tin g·ª£i √Ω ch·ªâ mang t√≠nh ch·∫•t **tham kh·∫£o**. Hi·ªáu qu·∫£ th·ª±c t·∫ø ph·ª• thu·ªôc v√†o nhi·ªÅu y·∫øu t·ªë.
                            \nƒê·ªÉ c√≥ gi·∫£i ph√°p ph√π h·ª£p v√† hi·ªáu qu·∫£ nh·∫•t:
                            \n1. Lu√¥n ƒë·ªçc k·ªπ v√† tu√¢n th·ªß h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng tr√™n nh√£n thu·ªëc BVTV.
                            \n2. √Åp d·ª•ng nguy√™n t·∫Øc 4 ƒë√∫ng v√† ƒë·∫£m b·∫£o th·ªùi gian c√°ch ly.
                            \n3. **H√£y ∆∞u ti√™n tham v·∫•n √Ω ki·∫øn t·ª´ c√°n b·ªô k·ªπ thu·∫≠t n√¥ng nghi·ªáp ho·∫∑c chuy√™n gia b·∫£o v·ªá th·ª±c v·∫≠t t·∫°i ƒë·ªãa ph∆∞∆°ng c·ªßa b·∫°n.**
                            """
                        )
                    else:
                        st.balloons()
                        st.write("üéâ Ch√∫c m·ª´ng! C√¢y c√† chua c·ªßa b·∫°n tr√¥ng kh·ªèe m·∫°nh.")
                        info_healthy = disease_info.get('healthy')
                        if info_healthy:
                            with st.expander("**L·ªùi khuy√™n duy tr√¨ s·ª©c kh·ªèe cho c√¢y**", expanded=True):
                                if info_healthy['actions']:
                                    for action in info_healthy['actions']:
                                        st.write(f"‚Ä¢ {action}")
                    st.markdown("---")
                else:
                    st.error(f"L·ªói h·ªá th·ªëng: Kh√¥ng t√¨m th·∫•y th√¥ng tin chi ti·∫øt cho m√£ b·ªánh '{predicted_class_key}'.")
                    st.info(f"ƒê·ªô tin c·∫≠y (n·∫øu c√≥): {display_confidence:.2f}%")

        elif analysis_result["status"] == 'LOW_GREEN':
            st.error(
                f"·∫¢nh kh√¥ng ph√π h·ª£p! C√≥ th·ªÉ ƒëang kh√¥ng ph·∫£i ƒë√¢y l√† ·∫£nh v√† c√† chua ! "
                "·∫¢nh c·∫ßn r√µ n√©t h∆°n v√† t·∫≠p trung v√†o l√° c√¢y. Vui l√≤ng th·ª≠ l·∫°i v·ªõi ·∫£nh kh√°c ho·∫∑c li√™n h·ªá t√°c gi·∫£ ƒë·ªÉ n·∫øu ƒë√¢y l√† nh·∫ßm l·∫´n"
            )
            st.info("Y√™u c·∫ßu ·∫£nh ch·ª•p r√µ l√° c√† chua, chi·∫øm ph·∫ßn l·ªõn di·ªán t√≠ch ·∫£nh, v·ªõi ƒë·ªß √°nh s√°ng v√† n·ªÅn kh√¥ng qu√° ph·ª©c t·∫°p.")
        elif analysis_result["status"] == 'MODEL_ERROR':
            st.error("L·ªói: Model nh·∫≠n d·∫°ng kh√¥ng th·ªÉ th·ª±c hi·ªán d·ª± ƒëo√°n. Vui l√≤ng ki·ªÉm tra th√¥ng b√°o l·ªói khi t·∫£i model (n·∫øu c√≥).")
        elif analysis_result["status"] == 'PREDICTION_ERROR':
             st.error(f"L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch ·∫£nh. Chi ti·∫øt: {analysis_result['error_detail']}. Vui l√≤ng th·ª≠ l·∫°i.")
        elif analysis_result["status"] == 'IMAGE_ERROR':
            st.error(f"L·ªói x·ª≠ l√Ω ·∫£nh: {analysis_result['error_detail']}. Vui l√≤ng ch·ªçn file ·∫£nh h·ª£p l·ªá (JPG, JPEG, PNG).")
        else:
            if model is not None:
                st.info("Ch√†o m·ª´ng b·∫°n! H√£y t·∫£i ·∫£nh l√° c√† chua l√™n ·ªü c·ªôt b√™n tr√°i ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")


st.markdown("---")
st.caption("·ª®ng d·ª•ng ph√¢n lo·∫°i b·ªánh l√° c√† chua ( Depp-Learning - Nh√≥m 9 )")